// Code generated by MockGen. DO NOT EDIT.
// Source: .\core\vault\vault.go

// Package mocks is a generated GoMock package.
package mocks

import (
	vault "go-my-kv-storage/core/vault"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBucket is a mock of IBucket interface.
type MockIBucket struct {
	ctrl     *gomock.Controller
	recorder *MockIBucketMockRecorder
}

// MockIBucketMockRecorder is the mock recorder for MockIBucket.
type MockIBucketMockRecorder struct {
	mock *MockIBucket
}

// NewMockIBucket creates a new mock instance.
func NewMockIBucket(ctrl *gomock.Controller) *MockIBucket {
	mock := &MockIBucket{ctrl: ctrl}
	mock.recorder = &MockIBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBucket) EXPECT() *MockIBucketMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIBucket) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIBucketMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIBucket)(nil).Clear))
}

// Delete mocks base method.
func (m *MockIBucket) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBucketMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBucket)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockIBucket) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIBucketMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIBucket)(nil).Get), key)
}

// Put mocks base method.
func (m *MockIBucket) Put(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIBucketMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIBucket)(nil).Put), key, value)
}

// Size mocks base method.
func (m *MockIBucket) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockIBucketMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockIBucket)(nil).Size))
}

// MockIVaultCore is a mock of IVaultCore interface.
type MockIVaultCore struct {
	ctrl     *gomock.Controller
	recorder *MockIVaultCoreMockRecorder
}

// MockIVaultCoreMockRecorder is the mock recorder for MockIVaultCore.
type MockIVaultCoreMockRecorder struct {
	mock *MockIVaultCore
}

// NewMockIVaultCore creates a new mock instance.
func NewMockIVaultCore(ctrl *gomock.Controller) *MockIVaultCore {
	mock := &MockIVaultCore{ctrl: ctrl}
	mock.recorder = &MockIVaultCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVaultCore) EXPECT() *MockIVaultCoreMockRecorder {
	return m.recorder
}

// DeleteBucket mocks base method.
func (m *MockIVaultCore) DeleteBucket(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockIVaultCoreMockRecorder) DeleteBucket(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockIVaultCore)(nil).DeleteBucket), id)
}

// GetBucket mocks base method.
func (m *MockIVaultCore) GetBucket(id int) (vault.IBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucket", id)
	ret0, _ := ret[0].(vault.IBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucket indicates an expected call of GetBucket.
func (mr *MockIVaultCoreMockRecorder) GetBucket(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucket", reflect.TypeOf((*MockIVaultCore)(nil).GetBucket), id)
}

// Size mocks base method.
func (m *MockIVaultCore) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockIVaultCoreMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockIVaultCore)(nil).Size))
}

// MockIVault is a mock of IVault interface.
type MockIVault struct {
	ctrl     *gomock.Controller
	recorder *MockIVaultMockRecorder
}

// MockIVaultMockRecorder is the mock recorder for MockIVault.
type MockIVaultMockRecorder struct {
	mock *MockIVault
}

// NewMockIVault creates a new mock instance.
func NewMockIVault(ctrl *gomock.Controller) *MockIVault {
	mock := &MockIVault{ctrl: ctrl}
	mock.recorder = &MockIVaultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVault) EXPECT() *MockIVaultMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockIVault) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockIVaultMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockIVault)(nil).Clear))
}

// Close mocks base method.
func (m *MockIVault) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIVaultMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIVault)(nil).Close))
}

// Delete mocks base method.
func (m *MockIVault) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIVaultMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIVault)(nil).Delete), key)
}

// DeleteBucket mocks base method.
func (m *MockIVault) DeleteBucket(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBucket", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBucket indicates an expected call of DeleteBucket.
func (mr *MockIVaultMockRecorder) DeleteBucket(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBucket", reflect.TypeOf((*MockIVault)(nil).DeleteBucket), id)
}

// Get mocks base method.
func (m *MockIVault) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIVaultMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIVault)(nil).Get), key)
}

// GetBucket mocks base method.
func (m *MockIVault) GetBucket(id int) (vault.IBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucket", id)
	ret0, _ := ret[0].(vault.IBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucket indicates an expected call of GetBucket.
func (mr *MockIVaultMockRecorder) GetBucket(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucket", reflect.TypeOf((*MockIVault)(nil).GetBucket), id)
}

// IsOpen mocks base method.
func (m *MockIVault) IsOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOpen indicates an expected call of IsOpen.
func (mr *MockIVaultMockRecorder) IsOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockIVault)(nil).IsOpen))
}

// Open mocks base method.
func (m *MockIVault) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockIVaultMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIVault)(nil).Open))
}

// Put mocks base method.
func (m *MockIVault) Put(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIVaultMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIVault)(nil).Put), key, value)
}

// Size mocks base method.
func (m *MockIVault) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockIVaultMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockIVault)(nil).Size))
}
